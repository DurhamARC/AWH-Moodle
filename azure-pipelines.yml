# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pr: none

pool:
  name: Default
  demands:
    - Agent.Name -equals vmlsha1

resources:
  - repo: self

variables:
  - group: arc-moodle01

  - name: appName
    value: 'duuksawhmoodle01'
  - name: webAppResourceGroupName
    value: 'du-uks-awh-arc-moodle01'
  - name: runtimeStack
    value: 'PHP|8.1'
  - name: azureSubscription
    value: 'svc-con-awh-01'
  - name: zipDistribution
    value: 'https://download.moodle.org/download.php/direct/stable401/moodle-4.1.2.zip'

steps:
# See https://docs.moodle.org/401/en/Installing_Moodle#Download_and_copy_files_into_place
# Alternate git download: `git clone -b MOODLE_{{Version3}}_STABLE git://git.moodle.org/moodle.
  - script: |
      set -e
      ls -lA
      
      echo Downloading Moodle to "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      curl -L -o moodle.zip "$(zipDistribution)"
      unzip -q moodle.zip
      
      cp *.php moodle/
      cd moodle
      mv config-dist.php config.php
    
      sed -i '/$CFG->reverseproxy/s/^\/\/[ ]*//g' config.php
      sed -i -E "/$CFG->dbhost\s*= '[a-z]+';/s/localhost/${DB_HOST}/" config.php
      sed -i -E "/$CFG->dbname\s*= '[a-z]+';/s/moodle/${DB_NAME}/" config.php
      sed -i -E "/$CFG->dbuser\s*= '[a-z]+';/s/username/${DB_USER}/" config.php
      sed -i -E "/$CFG->dbpass\s*= '[a-z]+';/s/password/${DB_PASS}/" config.php
    
      cat config.php | grep 'CFG\->reverseproxy'
      cat config.php | grep 'CFG\->dbhost'
      cat config.php | grep 'CFG\->dbname'
      cat config.php | grep 'CFG\->dbuser'
      cat config.php | grep 'CFG\->dbpass' | sed "s/${DB_PASS}/*******/"

    displayName: Get Moodle Release and place in artefact staging directory
    env:
      DB_HOST: $(DB_HOST)
      DB_NAME: $(DB_NAME)
      DB_USER: $(DB_USER)
      DB_PASS: $(DB_PASS)

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/moodle'
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      replaceExistingArchive: true
      displayName: "Archive Files"

  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      appType: 'webAppLinux'
      WebAppName: '$(appName)'
      ResourceGroupName: '$(webAppResourceGroupName)'
      azureSubscription: '$(azureSubscription)'
      deployToSlotOrASE: true
      SlotName: 'production'
      RuntimeStack: '$(runtimeStack)'
      packageForLinux: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      ScriptType: 'Inline Script'
      InlineScript: |
        set -e
        export WORKDIR=$(pwd)
        echo "Working directory is ${WORKDIR}"
        echo "I am $(whoami)"
             
        ls -lA
